.type Var <: symbol
.type Type <: symbol
.type Field <: symbol
.type Index <: symbol
.type Invocation <: symbol
.type Method <: symbol
.type Value <: symbol

#define ValueIdMacro(id, type) \
    cat(cat(cat(id, "::: "), type), "::: ")

// -- inputs --
// inner-procedural facts
.decl AssignVar(to:Var, from:Var)
.decl AssignStrConstant(to:Var, constant:symbol)
.decl AssignBoolConstant(to:Var, constant:symbol)
.decl AssignBinOp(to:Var, left:Var, op:symbol, right:Var)
.decl LoadField(to:Var, base:Var, f:Field)
.decl StoreField(base:Var, f:Field, from:Var)
.decl LoadIndex(to:Var, base:Var, i:Index)
.decl StoreIndex(base:Var, i:Index, from:Var)
.decl LoadSlice(to:Var, base:Var, st:Var, ed:Var, step:Var)

// inter-procedural facts
.decl Invoke(invo:Invocation)
.decl ActualParam(index:number, invo:Invocation, var:Var)
.decl FormalParam(index:number, meth:Method, var:Var)
.decl ActualKeyParam(keyword:Var, invo:Invocation, var:Var)
.decl FormalKeyParam(keyword:Var, meth:Method)
.decl ActualReturn(index:number, invo:Invocation, var:Var)
.decl FormalReturn(index:number, meth:Method, var:Var)
.decl CallGraphEdge(invo:Invocation, meth:Method)
// .decl MethodUpdate(meth:Method, index:number)

// taint analysis facts
.decl TaintSourceMethod(?method:Method, ?to:number, ?from:number, ?taintType:symbol)
// .decl TaintSourceRetMethod(?method:Method, ?index:number, ?taintType:symbol)
// .decl TaintSourceSetRetMethod(?method:Method, ?to:number, ?from:number, ?taintType:symbol)
.decl SinkMethod(?method:Method, ?index:number, ?label:symbol)
.decl ParamToParamTaintTransferMethod(?to:number, ?from:number, ?method:Method)
.decl ParamToRetTaintTransferMethod(?to:number, ?from:number, ?method:Method)
// .decl ParamToParamSetTaintTransferMethod(?to:number, ?from:number, ?method:Method)
// .decl ParamToRetSetTaintTransferMethod(?to:number, ?from:number, ?method:Method)


.decl VarType(var:Var, type:Type)
.decl Alloc(var:Var, value:Value)

.decl IsHeapObject(value:Value)
.decl IsTaintObject(value:Value)
.decl ParamToRetSubsetMethod(?to:number, ?from:number, ?method:Method)
.decl ParamToRetEquivMethod(?to:number, ?from:number, ?method:Method)

// -- facts --

.input AssignVar
.input AssignStrConstant
.input AssignBoolConstant
.input AssignBinOp
.input LoadField
.input StoreField
.input LoadIndex
.input StoreIndex
.input LoadSlice


.input Invoke

.input ActualParam
.input FormalParam
.input ActualKeyParam
.input FormalKeyParam
.input ActualReturn
.input FormalReturn
.input CallGraphEdge
// .input MethodUpdate
.input VarType
.input Alloc

// .decl TaintSourceMethod(?method:Method)
// // .decl BaseToRetTaintTransferMethod(?method:Method)
// // .decl BaseToParamTaintTransferMethod(?method:Method)
// .decl ParamToBaseTaintTransferMethod(?index:number, ?method:Method)
// // .decl ParamIndexToBaseTaintTransferMethod(?index:number, ?method:Method)
// .decl ParamToRetTaintTransferMethod(?index:number, ?method:Method)

// TaintSourceRetMethod("pandas.read_csv", 0, "row").
TaintSourceMethod("numpy.mean", 0, 1, "rowset").
TaintSourceMethod("TfidfTransformer.transform", 0, 1, "rowset").
SinkMethod("LogisticRegression.fit", 1, "train").
SinkMethod("LogisticRegression.fit", 2, "train").
SinkMethod("LogisticRegression.predict", 1, "test").

SinkMethod("trainSinkPoint", 1, "train").
SinkMethod("testSinkPoint", 1, "test").

// ParamToRetTaintTransferMethod(0, 0, "pandas.Series.fillna").
// ParamToRetTaintTransferMethod(0, 0, "pandas.Series.drop").
// ParamToRetTaintTransferMethod(0, 0, "pandas.DataFrame.drop").

ParamToRetTaintTransferMethod(0, 1, "pandas.Series.fillna").
ParamToParamTaintTransferMethod(0, 1, "pandas.Series.fillna").

// ParamToRetTaintTransferMethod(0, 1, "train_test_split").
// ParamToRetTaintTransferMethod(1, 1, "train_test_split").
// ParamToRetTaintTransferMethod(2, 2, "train_test_split").
// ParamToRetTaintTransferMethod(3, 2, "train_test_split").

ParamToRetSubsetMethod(0, 1, "train_test_split").
ParamToRetSubsetMethod(1, 1, "train_test_split").
ParamToRetSubsetMethod(2, 2, "train_test_split").
ParamToRetSubsetMethod(3, 2, "train_test_split").

ParamToRetEquivMethod(0, 0, "pandas.Series.fillna").
ParamToRetEquivMethod(0, 0, "pandas.Series.drop").
ParamToRetEquivMethod(0, 0, "pandas.DataFrame.drop").
ParamToRetEquivMethod(0, 0, "tuple[Unknown, Unbound | Any | float | Unknown | ndarray | None] | Unknown | Any | csr_matrix | ndarray.toarray").
ParamToRetEquivMethod(0, 1, "pandas.DataFrame").
ParamToRetEquivMethod(0, 1, "TfidfTransformer.transform").

// -- analysis --

.decl VarPointsTo(var:Var, value:Value)
.decl FieldPointsTo(base:Value, field:Field, value:Value)

.decl InterProcAssign(to:Var, from:Var)

// .decl TaintedValue(value:Value)
.decl TaintedVar(var:Var)
.decl TaintLabel(taintValue:Value, srcValue:Value, taintType:symbol)
// .decl IsTaintedFrom(from:Var, to:Var, meth:Method)
.decl Leak(value:Value, sink:Invocation, meth:Method)

.decl TaintFrom(to:Var, from:Var)

.decl ValueFlowTo(to:Value, from:Value)

// .decl IsHeapSubset(subset:Value, set:Value)

VarPointsTo(var, value) :- Alloc(var, value).
VarPointsTo(to, value) :- 
    AssignVar(to, from),
    VarPointsTo(from, value).
VarPointsTo(to, value) :- 
    LoadIndex(to, base, _),
    VarPointsTo(base, value).
VarPointsTo(base, value) :- 
    StoreIndex(base, _, from),
    VarPointsTo(from, value).
VarPointsTo(to, value) :- 
    LoadField(to, base, fld),
    VarPointsTo(base, baseValue),
    FieldPointsTo(baseValue, fld, value).
FieldPointsTo(baseValue, fld, value) :-
    StoreField(base, fld, from),
    VarPointsTo(base, baseValue),
    VarPointsTo(from, value).

VarPointsTo(to, value) :- 
    LoadSlice(to, from, _, _, _),
    VarPointsTo(from, value).

InterProcAssign(to, from) :-
    CallGraphEdge(invo, meth),
    FormalParam(index, meth, to),
    ActualParam(index, invo, from).

InterProcAssign(to, from) :-
    CallGraphEdge(invo, meth),
    FormalKeyParam(to, meth),
    ActualKeyParam(to, invo, from).

InterProcAssign(to, from) :-
    CallGraphEdge(invo, meth),
    FormalReturn(index, meth, from),
    ActualReturn(index, invo, to).

VarPointsTo(to, value) :- 
    InterProcAssign(to, from),
    VarPointsTo(from, value),
    IsHeapObject(value).

IsHeapObject(value) :-
    Alloc(_, value).

// IsHeapSubset(subset, set) :-
//     ActualParam(fromIndex, invo, from),
//     VarPointsTo(from, set),
//     IsHeapObject(set),
//     ActualReturn(toIndex, invo, to),
//     VarPointsTo(to, subset),
//     IsHeapObject(subset),
//     CallGraphEdge(invo, meth),
//     ParamToRetSubsetMethod(toIndex, fromIndex, meth).

// IsHeapSubset(subset, set) :-
//     IsHeapSubset(subset, middleset),
//     IsHeapSubset(middleset, set).

ValueFlowTo(toHeap, fromHeap) :-
    ActualParam(fromIndex, invo, from),
    VarPointsTo(from, fromHeap),
    IsHeapObject(fromHeap),
    ActualReturn(toIndex, invo, to),
    VarPointsTo(to, toHeap),
    IsHeapObject(toHeap),
    CallGraphEdge(invo, meth),
    (ParamToRetEquivMethod(toIndex, fromIndex, meth); ParamToRetSubsetMethod(toIndex, fromIndex, meth)).


ValueFlowTo(toHeap, baseHeap) :-
    VarPointsTo(base, baseHeap),
    IsHeapObject(baseHeap),
    VarPointsTo(to, toHeap),
    IsHeapObject(toHeap),
    LoadSlice(to, base, _, _, _).


ValueFlowTo(toHeap, fromHeap) :-
    ValueFlowTo(toHeap, midHeap),
    ValueFlowTo(midHeap, fromHeap).

TaintedVar(var) :-
    VarPointsTo(var, value),
    IsTaintObject(value).

// IsTaintObject(value),
// VarPointsTo(from, value),
// TaintLabel(value, fromValue, taintType) :-
//     value = ValueIdMacro(fromValue, taintType),
//     CallGraphEdge(invo, meth),
//     TaintSourceMethod(meth, idx, taintType),
//     ActualParam(idx, invo, from),
//     VarPointsTo(from, fromValue),
//     IsHeapObject(fromValue).

// IsTaintObject(value),
// VarPointsTo(from, value),
// TaintLabel(value, fromValue, taintType) :-
//     value = ValueIdMacro(fromValue, taintType),
//     CallGraphEdge(invo, meth),
//     TaintSourceRetMethod(meth, idx, taintType),
//     ActualReturn(idx, invo, from),
//     VarPointsTo(from, fromValue),
//     IsHeapObject(fromValue).

IsTaintObject(value),
VarPointsTo(to, value),
TaintLabel(value, fromValue, taintType) :-
    value = ValueIdMacro(fromValue, taintType),
    CallGraphEdge(invo, meth),
    TaintSourceMethod(meth, toIdx, fromIdx, taintType),
    ActualParam(fromIdx, invo, from),
    ActualReturn(toIdx, invo, to),
    VarPointsTo(from, fromValue),
    IsHeapObject(fromValue).

TaintFrom(to, from):-
    ActualParam(toIndex, invo, to),
    ActualParam(fromIndex, invo, from),
    CallGraphEdge(invo, meth),
    ParamToParamTaintTransferMethod(toIndex, fromIndex, meth).

TaintFrom(to, from) :-
    ActualParam(fromIndex, invo, from),
    ActualReturn(toIndex, invo, to),
    CallGraphEdge(invo, meth),
    ParamToRetTaintTransferMethod(toIndex, fromIndex, meth).

TaintFrom(to, from) :-
    VarPointsTo(to, toHeap),
    VarPointsTo(from, fromHeap),
    ValueFlowTo(toHeap, fromHeap).


// TaintFrom(to, from):-
//     ActualParam(toIndex, invo, to),
//     ActualParam(fromIndex, invo, from),
//     CallGraphEdge(invo, meth),
//     ParamToParamSetTaintTransferMethod(toIndex, fromIndex, meth).

// TaintFrom(to, from) :-
//     ActualParam(fromIndex, invo, from),
//     ActualReturn(toIndex, invo, to),
//     CallGraphEdge(invo, meth),
//     ParamToRetSetTaintTransferMethod(toIndex, fromIndex, meth).

IsTaintObject(newValue),
VarPointsTo(var, value),
TaintLabel(newValue, srcValue, taintType)  :-
    newValue = ValueIdMacro(oldValue, taintType),
    TaintFrom(to, from),
    VarPointsTo(from, value),
    IsTaintObject(value),
    TaintLabel(value, srcValue, taintType),
    VarPointsTo(to, oldValue),
    Alloc(var, oldValue),
    IsHeapObject(oldValue).

Leak(value, invo, meth) :-
    SinkMethod(meth, idx, "train"),
    CallGraphEdge(invo, meth),
    ActualParam(idx, invo, var),
    VarPointsTo(var, value),
    IsTaintObject(value),
    TaintLabel(value, srcValue1, "rowset"),
    SinkMethod(meth2, idx2, "test"),
    CallGraphEdge(invo2, meth2),
    ActualParam(idx2, invo2, var2),
    VarPointsTo(var2, value2),
    ValueFlowTo(value2, srcValue1).

.output ValueFlowTo
.output TaintedVar
.output VarPointsTo
.output Leak