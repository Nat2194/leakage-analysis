.type Var <: symbol
.type Type <: symbol
.type Field <: symbol
.type Index <: symbol
.type Invocation <: symbol
.type Method <: symbol
.type Value <: symbol

#define ValueIdMacro(id, type) \
    cat(cat(cat(id, "::: "), type), "::: ")

// -- inputs --
// inner-procedural facts
.decl AssignVar(to:Var, from:Var)
.decl AssignStrConstant(to:Var, constant:symbol)
.decl AssignBoolConstant(to:Var, constant:symbol)
.decl AssignBinOp(to:Var, left:Var, op:symbol, right:Var)
.decl LoadField(to:Var, base:Var, f:Field)
.decl StoreField(base:Var, f:Field, from:Var)
.decl LoadIndex(to:Var, base:Var, i:Index)
.decl StoreIndex(base:Var, i:Index, from:Var)
.decl LoadSlice(to:Var, base:Var, st:Var, ed:Var, step:Var)

// inter-procedural facts
.decl Invoke(invo:Invocation)
.decl ActualParam(index:number, invo:Invocation, var:Var)
.decl FormalParam(index:number, meth:Method, var:Var)
.decl ActualKeyParam(keyword:Var, invo:Invocation, var:Var)
// .decl FormalKeyParam(keyword:Var, meth:Method)
.decl ActualReturn(index:number, invo:Invocation, var:Var)
.decl FormalReturn(index:number, meth:Method, var:Var)
.decl CallGraphEdge(invo:Invocation, meth:Method)
// .decl MethodUpdate(meth:Method, index:number)
.decl VarType(var:Var, type:Type)
.decl Alloc(var:Var, value:Value)

.input AssignVar
.input AssignStrConstant
.input AssignBoolConstant
.input AssignBinOp
.input LoadField
.input StoreField
.input LoadIndex
.input StoreIndex
.input LoadSlice

.input Invoke

.input ActualParam
.input FormalParam
.input ActualKeyParam
.input ActualReturn
.input FormalReturn
.input CallGraphEdge
.input VarType
.input Alloc


// train/test locations
.decl TrainingData(?method:Method, ?model_idx:number, ?data_index:number)
.decl TestData(?method:Method, ?model_idx:number, ?data_index:number)

// taint analysis input relations
.decl ParamToRetTaintSourceMethod(?to:number, ?from:number, ?method:Method, ?taintType:symbol)
.decl ParamToParamTaintSourceMethod(?to:number, ?from:number, ?method:Method, ?taintType:symbol)
.decl RetTaintSourceMethod(?retIndex:number, ?method:Method, ?taintType:symbol)
.decl ParamToRetCondTaintSourceMethod(?to:number, ?from:number, ?cond_id:number, ?method:Method, ?taintType:symbol)
.decl ParamToParamCondTaintSourceMethod(?to:number, ?from:number, ?cond_id:number, ?method:Method, ?taintType:symbol)
.decl TaintCondition(?cond_id:number, ?src_idx:number, ?taintType:symbol)

// .decl ParamToParamTaintTransferMethod(?to:number, ?from:number, ?method:Method)
// .decl ParamToRetTaintTransferMethod(?to:number, ?from:number, ?method:Method)
// .decl ParamKeyToRetTaintTransferMethod(?to:number, ?from:Var, ?method:Method)


// .decl TaintSourceRetMethod(?method:Method, ?index:number, ?taintType:symbol)
// .decl TaintSourceSetRetMethod(?method:Method, ?to:number, ?from:number, ?taintType:symbol)
// .decl SinkMethod(?method:Method, ?index:number, ?label:symbol)
// .decl ParamToParamSetTaintTransferMethod(?to:number, ?from:number, ?method:Method)
// .decl ParamToRetSetTaintTransferMethod(?to:number, ?from:number, ?method:Method)

// // heap flow analysis facts
// .decl ParamToRetSubsetMethod(?to:number, ?from:number, ?method:Method)
// .decl ParamToRetEquivMethod(?to:number, ?from:number, ?method:Method)


// -- facts --

ParamToParamFlow(0, 1, "pandas.Series.fillna").

ParamToRetTaintSourceMethod(0, 1, "numpy.mean", "rowset").
ParamToRetTaintSourceMethod(0, 1, "CountVectorizer.fit_transform", "rowset").
ParamToRetTaintSourceMethod(0, 1, "TfidfTransformer.transform", "rowset").
ParamToRetTaintSourceMethod(0, 1, "TfidfTransformer.fit_transform", "rowset").
ParamToRetTaintSourceMethod(0, 1, "TfidfVectorizer.fit_transform", "rowset").
ParamToRetTaintSourceMethod(0, 1, "StandardScaler.fit_transform", "rowset"). 
ParamToRetTaintSourceMethod(0, 1, "sklearn.preprocessing.scale", "rowset"). 

ParamToParamTaintSourceMethod(0, 1, "PCA.fit", "rowset"). 
ParamToParamTaintSourceMethod(0, 1, "SelectPercentile.fit", "rowset"). 


RetTaintSourceMethod(0, "sklearn.preprocessing.Imputer", "pipeline"). // not always a problem, be conservative
RetTaintSourceMethod(0, "sklearn.preprocessing.MinMaxScaler", "pipeline"). 

ParamToRetCondTaintSourceMethod(0, 1, 4027, "DataFrameMapper.fit_transform", "rowset"). // only when the mapper is tainted!!! [TODO]
ParamToRetCondTaintSourceMethod(0, 1, 4027, "Pipeline.fit_transform",  "rowset"). // only when the pipeline is tainted!!! [TODO]
TaintCondition(4027, 0, "pipeline").

TrainingData(meth, 0, 1) :-
    CallGraphEdge(_, meth),
    match(".*[.]fit", meth).

TestData(meth, 0, 1) :-
    CallGraphEdge(_, meth),
    match(".*[.](predict|score|evaluate|predict_proba)", meth).

// TrainingData("LogisticRegression.fit", 0, 1).
// TrainingData("GaussianNB.fit", 0, 1).
// TrainingData("Unknown.fit", 0, 1).
// TrainingData("Model.fit", 0, 1).
// TrainingData("Sequential.fit", 0, 1).

// TestData("LogisticRegression.predict", 0, 1).
// TestData("GaussianNB.predict", 0, 1).
// TestData("Unknown.predict_proba", 0, 1).
// TestData("Unknown.score", 0, 1).
// TestData("Model.evaluate", 0, 1).
// TestData("Sequential.evaluate", 0, 1).

// ParamToRetTaintTransferMethod(0, 1, "pandas.Series.fillna").
// ParamToParamTaintTransferMethod(0, 1, "pandas.Series.fillna").
// ParamToRetTaintTransferMethod(0, 0, "PCA.transform").
// ParamToRetTaintTransferMethod(0, 0, "SelectPercentile.transform").
// ParamToRetTaintTransferMethod(0, 1, "DataFrameMapper").
// ParamToRetTaintTransferMethod(0, 1, "Pipeline").
// ParamKeyToRetTaintTransferMethod(0, "transformer_list", "FeatureUnion").
// ParamToRetTaintTransferMethod(0, 1, "RandomizedSearchCV").

// // ParamToRetSubsetMethod(0, 1, "train_test_split").
// // ParamToRetSubsetMethod(1, 1, "train_test_split").
// // ParamToRetSubsetMethod(2, 2, "train_test_split").
// // ParamToRetSubsetMethod(3, 2, "train_test_split").
// // ParamToRetSubsetMethod(0, 1, "Unknown.train_test_split"). //regex matching??? [TODO]
// // ParamToRetSubsetMethod(1, 1, "Unknown.train_test_split").
// // ParamToRetSubsetMethod(2, 2, "Unknown.train_test_split").
// // ParamToRetSubsetMethod(3, 2, "Unknown.train_test_split").

// ParamToRetSubsetMethod(0, 1, meth),
// ParamToRetSubsetMethod(1, 1, meth),
// ParamToRetSubsetMethod(2, 2, meth),
// ParamToRetSubsetMethod(3, 2, meth) :-
//     CallGraphEdge(_, meth),
//     match(".*train_test_split", meth).

// ParamToRetEquivMethod(0, 0, "pandas.Series.fillna").
// ParamToRetEquivMethod(0, 0, "pandas.Series.drop").
// ParamToRetEquivMethod(0, 0, "pandas.DataFrame.drop").
// ParamToRetEquivMethod(0, 0, "tuple[Unknown, Unbound | Any | float | Unknown | ndarray | None] | Unknown | Any | csr_matrix | ndarray.toarray").
// ParamToRetEquivMethod(0, 1, "pandas.DataFrame").
// ParamToRetEquivMethod(0, 1, "pandas.concat").
// ParamToRetEquivMethod(0, 1, "pandas.get_dummies").
// ParamToRetEquivMethod(0, 1, "numpy.array").
// ParamToRetEquivMethod(0, 1, "sklearn.preprocessing.scale").
// // ParamToRetEquivMethod(0, 0, "Pipeline.fit").
// // ParamToRetEquivMethod(0, 1, "TfidfTransformer.transform").
// // ParamToRetEquivMethod(0, 1, "DataFrameMapper.fit_transform").
// // ParamToRetEquivMethod(0, 1, "StandardScaler.fit_transform").
// ParamToRetEquivMethod(0, 0, meth) :-
//     CallGraphEdge(_, meth),
//     match(".*[.](astype)", meth).

// ParamToRetEquivMethod(0, 0, meth) :-
//     CallGraphEdge(_, meth),
//     match(".*[.](fit)", meth).

// ParamToRetEquivMethod(0, 1, meth) :-
//     CallGraphEdge(_, meth),
//     match(".*[.](transform|fit_transform)", meth).



// -- analysis --

.decl VarPointsTo(var:Var, value:Value)
// .decl FieldPointsTo(base:Value, field:Field, value:Value)

.decl InterProcAssign(to:Var, from:Var)

// .decl TaintedValue(value:Value)
.decl TaintedVar(var:Var)
.decl TaintSource(taintValue:Value, srcValue:Value, taintType:symbol)
// .decl TaintFrom(to:Var, from:Var)

// .decl ValueFlowTo(to:Value, from:Value)

.decl IsHeapObject(value:Value)
.decl IsTaintObject(value:Value)

// .decl IsHeapSubset(subset:Value, set:Value)

// data flow analysis
.decl FlowFrom(?to:Var, ?from:Var)
.decl FlowFromEdge(?to:Var, ?from:Var)
.decl ParamToParamFlow(?to:number, ?from:number, ?method:Method) // input facts

VarPointsTo(var, value) :- Alloc(var, value).
VarPointsTo(to, value) :- 
    AssignVar(to, from),
    VarPointsTo(from, value).
VarPointsTo(to, value) :- 
    LoadIndex(to, base, _),
    VarPointsTo(base, value).
VarPointsTo(base, value) :- 
    StoreIndex(base, _, from),
    VarPointsTo(from, value).
VarPointsTo(to, value) :- 
    LoadField(to, base, _),
    VarPointsTo(base, value).
VarPointsTo(base, value) :- 
    StoreField(base, _, from),
    VarPointsTo(from, value).
// VarPointsTo(to, value) :- 
//     LoadField(to, base, fld),
//     VarPointsTo(base, baseValue),
//     FieldPointsTo(baseValue, fld, value).
// FieldPointsTo(baseValue, fld, value) :-
//     StoreField(base, fld, from),
//     VarPointsTo(base, baseValue),
//     VarPointsTo(from, value).

VarPointsTo(to, value) :- 
    LoadSlice(to, from, _, _, _),
    VarPointsTo(from, value).

InterProcAssign(to, from) :-
    CallGraphEdge(invo, meth),
    FormalParam(index, meth, to),
    ActualParam(index, invo, from).

InterProcAssign(to, from) :-
    CallGraphEdge(invo, meth),
    FormalParam(_, meth, to),
    ActualKeyParam(to, invo, from).

InterProcAssign(to, from) :-
    CallGraphEdge(invo, meth),
    FormalReturn(index, meth, from),
    ActualReturn(index, invo, to).

VarPointsTo(to, value) :- 
    InterProcAssign(to, from),
    VarPointsTo(from, value).
    // IsHeapObject(value).

IsHeapObject(value) :-
    Alloc(_, value).

// IsHeapSubset(subset, set) :-
//     ActualParam(fromIndex, invo, from),
//     VarPointsTo(from, set),
//     IsHeapObject(set),
//     ActualReturn(toIndex, invo, to),
//     VarPointsTo(to, subset),
//     IsHeapObject(subset),
//     CallGraphEdge(invo, meth),
//     ParamToRetSubsetMethod(toIndex, fromIndex, meth).

// IsHeapSubset(subset, set) :-
//     IsHeapSubset(subset, middleset),
//     IsHeapSubset(middleset, set).

FlowFromEdge(to, from) :-
    CallGraphEdge(invo, _),
    (ActualParam(_, invo, from); ActualKeyParam(_, invo, from)),
    ActualReturn(_, invo, to).

FlowFromEdge(to, from) :-
    CallGraphEdge(invo, meth),
    ParamToParamFlow(toIdx, fromIdx, meth),
    ActualParam(toIdx, invo, to),
    ActualParam(fromIdx, invo, from).

FlowFromEdge(to, from) :-
    InterProcAssign(to, from).

FlowFromEdge(to, from) :-
    AssignVar(to, from); LoadIndex(to, from, _); StoreIndex(to, _, from); 
    LoadField(to, from, _); StoreField(to, _, from); LoadSlice(to, from, _, _, _).

FlowFrom(to, from) :-
    FlowFromEdge(to, from).

FlowFrom(to, from) :-
    FlowFrom(to, mid),
    FlowFrom(mid, from).

// ValueFlowTo(toHeap, fromHeap) :-
//     ActualParam(fromIndex, invo, from),
//     VarPointsTo(from, fromHeap),
//     IsHeapObject(fromHeap),
//     ActualReturn(toIndex, invo, to),
//     VarPointsTo(to, toHeap),
//     IsHeapObject(toHeap),
//     CallGraphEdge(invo, meth),
//     (ParamToRetEquivMethod(toIndex, fromIndex, meth); ParamToRetSubsetMethod(toIndex, fromIndex, meth)).

// ValueFlowTo(toHeap, baseHeap) :-
//     VarPointsTo(base, baseHeap),
//     IsHeapObject(baseHeap),
//     VarPointsTo(to, toHeap),
//     IsHeapObject(toHeap),
//     LoadSlice(to, base, _, _, _).

// ValueFlowTo(toHeap, fromHeap) :-
//     ValueFlowTo(toHeap, midHeap),
//     ValueFlowTo(midHeap, fromHeap).


TaintedVar(var) :-
    VarPointsTo(var, value),
    IsTaintObject(value).

IsTaintObject(value),
VarPointsTo(to, value),
TaintSource(value, fromValue, taintType) :-
    value = ValueIdMacro(fromValue, taintType),
    CallGraphEdge(invo, meth),
    ParamToRetTaintSourceMethod(toIdx, fromIdx, meth, taintType),
    ActualParam(fromIdx, invo, from),
    ActualReturn(toIdx, invo, to),
    VarPointsTo(from, fromValue),
    IsHeapObject(fromValue).

IsTaintObject(value),
VarPointsTo(to, value),
TaintSource(value, fromValue, taintType) :-
    value = ValueIdMacro(fromValue, taintType),
    CallGraphEdge(invo, meth),
    ParamToParamTaintSourceMethod(toIdx, fromIdx, meth, taintType),
    ActualParam(fromIdx, invo, from),
    ActualParam(toIdx, invo, to),
    VarPointsTo(from, fromValue),
    IsHeapObject(fromValue).

IsTaintObject(value),
VarPointsTo(to, value),
TaintSource(value, toValue, taintType) :-
    value = ValueIdMacro(toValue, taintType),
    CallGraphEdge(invo, meth),
    RetTaintSourceMethod(idx, meth, taintType),
    ActualReturn(idx, invo, to),
    VarPointsTo(to, toValue),
    IsHeapObject(toValue).

IsTaintObject(value),
VarPointsTo(to, value),
TaintSource(value, fromValue, taintType) :-
    value = ValueIdMacro(fromValue, taintType),
    CallGraphEdge(invo, meth),
    ParamToRetCondTaintSourceMethod(toIdx, fromIdx, cond_id, meth, taintType),
    TaintCondition(cond_id, srcIdx, srcTaintType),
    ActualParam(srcIdx, invo, src),
    VarPointsTo(src, srcValue),
    TaintSource(srcValue, _, srcTaintType),
    ActualParam(fromIdx, invo, from),
    ActualReturn(toIdx, invo, to),
    VarPointsTo(from, fromValue),
    IsHeapObject(fromValue).

// TaintFrom(to, from):-
//     ActualParam(toIndex, invo, to),
//     ActualParam(fromIndex, invo, from),
//     CallGraphEdge(invo, meth),
//     ParamToParamTaintTransferMethod(toIndex, fromIndex, meth).

// TaintFrom(to, from) :-
//     ActualParam(fromIndex, invo, from),
//     ActualReturn(toIndex, invo, to),
//     CallGraphEdge(invo, meth),
//     ParamToRetTaintTransferMethod(toIndex, fromIndex, meth).

// TaintFrom(to, from) :-
//     ActualKeyParam(keyword, invo, from),
//     ActualReturn(toIndex, invo, to),
//     CallGraphEdge(invo, meth),
//     ParamKeyToRetTaintTransferMethod(toIndex, keyword, meth).

// TaintFrom(to, from) :-
//     VarPointsTo(to, toHeap),
//     VarPointsTo(from, fromHeap),
//     ValueFlowTo(toHeap, fromHeap).

// TaintFrom(to, from) :-
//     FlowFrom(to, from).

IsTaintObject(newValue),
VarPointsTo(var, value),
TaintSource(newValue, srcValue, taintType)  :-
    newValue = ValueIdMacro(oldValue, taintType),
    FlowFromEdge(to, from),
    VarPointsTo(from, value),
    IsTaintObject(value),
    TaintSource(value, srcValue, taintType),
    VarPointsTo(to, oldValue),
    Alloc(var, oldValue),
    IsHeapObject(oldValue).

.decl TrainingDataTaintValue(model:Var, taintValue:Value, invo:Invocation, meth:Method)
.decl TestDataValue(model:Var, test:Var, invo:Invocation, meth:Method)
.decl Leak(value:Value, invo:Invocation, meth:Method)

TrainingDataTaintValue(model, taintValue, invo, meth) :-
    TrainingData(meth, model_idx, idx),
    CallGraphEdge(invo, meth),
    ActualParam(idx, invo, var),
    FlowFrom(var, tainted_var),
    VarPointsTo(tainted_var, taintValue),
    IsTaintObject(taintValue),
    ActualParam(model_idx, invo, model).

TestDataValue(model, var, invo, meth) :-
    TestData(meth, model_idx, idx),
    CallGraphEdge(invo, meth),
    ActualParam(idx, invo, var),
    ActualParam(model_idx, invo, model).

Leak(taintValue, invo, meth) :-
    TrainingDataTaintValue(model, taintValue, invo, meth),
    TestDataValue(model2, test, _, _),
    TaintSource(taintValue, srcValue, "rowset"),
    VarPointsTo(src, srcValue),
    FlowFrom(test, src),
    (model = model2; FlowFrom(model2, model)).


.output TrainingDataTaintValue
.output TestDataValue
.output FlowFromEdge
.output TaintedVar
.output VarPointsTo
.output Leak